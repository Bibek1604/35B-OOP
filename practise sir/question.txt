Question: Design and implement a Java program that simulates a financial transaction system.
 Your system should be capable of processing different types of transactions, such as deposits and withdrawals, 
 and alerting if any transactions exceed certain limits. Use interfaces to define common behaviors for transactions 
 and implement these behaviors in different transaction classes.
 
Create an interface named Transaction with at least two methods:

getAmount() which returns the amount of the transaction as a double
isValid() which returns a boolean indicating if the transaction is valid based on certain criteria
Implement the Transaction interface in at least three separate classes, DepositTransaction and WithdrawalTransaction.
 Each class should have a constructor that sets a limit for transactions and specific logic to determine if the transaction is valid.

Question: Design and implement a Java program that simulates a network monitoring system. Your system should be
 capable of monitoring different types of network devices, such as routers and switches, and alerting if any devices are 
 experiencing errors or downtime. Use interfaces to define common behaviors for network devices and implement these behaviors
  in different device classes.

Create an interface named NetworkDevice with at least two methods:

getStatus() which returns a String indicating the current status of the device
isAvailable() which returns a boolean indicating if the device is currently available and functioning correctly
Implement the NetworkDevice interface in at least three separate classes, Router and Switch. Each class 
should have a constructor that sets specific properties for the device and specific logic to determine its status and availability.

Question: Design and implement a Java program that simulates the undo feature of a text editor using a stack.
 The program should support adding text to the editor and undoing changes. The stack should store strings,
  each representing a version of the text. Implement methods for:

adding text to the editor : addText(String text)
undoing changes : undo()
getting the current text : getCurrentText()






Question: Design and implement a simple Java application that prompts the user to enter 
a string within a specified length, for example, between 5 and 20 characters.
 Your application should throw and handle a custom exception if the user enters a string outside this length.

InvalidStringLengthException:
A custom exception that is thrown when the user enters a string with a length outside the valid range (5 to 20 characters).




Question: Design and implement a simple Java application that prompts the user to enter a valid email address.
 Your application should throw and handle a custom exception if the user enters an invalid email address.

InvalidEmailException:
A custom exception that is thrown when the user enters an email address that does not match a valid email pattern 
(e.g., it should contain @ and . characters).


Question: Write a program that prompts the user to enter five integer values and 
reads them into an array. The program should consist of the following methods:

a method named max that reads an array of integer values and returns the maximum value
a method named indexOfHighest that returns the index of the highest element in an array of integers.
 If more than one such element exists, return the smallest index. Invoke the above methods and demonstrate them in the program.





